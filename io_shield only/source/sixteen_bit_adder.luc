module sixteen_bit_adder (
    //inputs 
    input alufn[6], // 6 bit alufn signal
    input a[16], // 16 bit a input
    input b[16], // 16 bit b input
    
    //outputs
    output sum[16],
    output z,
    output v,
    output n
  ) {
  
 modulo modulo(.a(a), .b(b));
 sig add_interim[16];
  
 sig xor_b;
  
  
always {
    sum = 16b0;
    // ALUFN[0] == ADD
    if(alufn[0] == 0){
      add_interim = a + b;
    }else{
      add_interim = a - b;
    }
    
    
    if(b[15] == 0 && alufn[0] == 0){
      xor_b = 0;
    }else if(b[15] == 1 && alufn[0] == 0){
      xor_b = 1;
    }else if(b[15] == 0 && alufn[0] == 1){
      xor_b = 1;
    }else{
      xor_b = 0;
    }
    
    if(add_interim == 0){
       z = 1;
    }else{
    z = 0;
    }
    v = (((a[15])&(xor_b)&(~add_interim[15])) | ((~a[15])&(~xor_b)&(add_interim[15])));
    n = add_interim[15];
    
    case (alufn[1:0]) {
      b00:
        // add
        sum = add_interim;
      b01:
        // substract
        sum = add_interim;
      
      b10:
        // multiply
        sum = a * b;
        
      b11:
        // divide
        sum = a / b;
        // modulo
        if (alufn[2] == b1) {
          sum = modulo.out;
        }
    }
    
       
  }
}