// testing checker fsm
module au_top_testchecker (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      checker checker;
      regfile regfile;
    }
  }
  sixteen_bit_alu sixteen_bit_alu;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;
    
    usb_tx = usb_rx;        // loop serial port
     
    led = 8h00;             // turn LEDs off
       
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;
    io_led = 3x{{8h00}};
    
    checker.start = 0;   

    checker.aluout = sixteen_bit_alu.alu;
    checker.x = regfile.x;
      
    regfile.ra = checker.ra;
    regfile.rb = checker.rb;
    regfile.rdata = checker.rdata;
    regfile.write_address = checker.r;
    regfile.werf = checker.werf;
      
    sixteen_bit_alu.alufn = checker.alufn;
    sixteen_bit_alu.a = regfile.radata;
    if (checker.bsel == 0) {
      sixteen_bit_alu.b = regfile.rbdata;
    } else {
      sixteen_bit_alu.b = d10; // when bsel = 1
    } 
      
    if (checker.cmplt == 1) {
      checker.start = 0;
      io_led[0] = checker.cmplt;
      io_led[1] = checker.z;
    }
    
  }
}