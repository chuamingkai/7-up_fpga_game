// testing checker fsm
module au_top_testchecker (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      checker checker;
      regfile regfile;
      dff cmplt[2];
      dff y[3];
      dff aluval[16];
    }
  }
  nested_alu nested_alu;

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;
    
    usb_tx = usb_rx;        // loop serial port
     
    led = 8h00;             // turn LEDs off
       
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;
    io_led = 3x{{8h00}};
    
    nested_alu.a = regfile.radata;
    nested_alu.b = regfile.rbdata;
    nested_alu.alufn = checker.alufn;
    nested_alu.bsel = checker.bsel;
    
    checker.aluout = nested_alu.alu;
    checker.start = 1;
    checker.x = regfile.x;
    
    regfile.ra = checker.ra;
    regfile.rb = checker.rb;
    regfile.write_address = checker.r;
    regfile.rdata = checker.rdata;
    regfile.werf = checker.werf;
    
      cmplt.d = checker.cmplt;
      y.d = checker.y;
    
    if (cmplt.q != 0) {
      checker.start = 0;
      cmplt.d = cmplt.q;
      y.d = y.q;      
    }
     
    
    aluval.d = nested_alu.alu;
    
    io_led[0][1:0] = cmplt.q;
    io_led[0][4:2] = y.q;
    io_led[2:1] = $build(aluval.q,2);
    
    
  }
}